-- // Variables

local game = game 
local GetService = game.GetService 
local Players = GetService(game, "Players") 
local LocalPlayer = Players.LocalPlayer

local PlayerData = {}

local HighlightParent = GetService(game, "CoreGui")

-- // Set HighlightParent to protected environment

if gethui then HighlightParent = gethui() end 
if get_hidden_gui then HighlightParent = get_hidden_gui() end

-- // Functions

function CreateInstance(Class, Properties) -- // So we can create instances faster
    local Object = Instance.new(Class)
    for i, v in pairs(Properties) do 
        Object[i] = v
    end 

    return Object
end 

-- // Default Settings

local ESPSettings = {
    Highlight = {
        Enabled = true,
        DepthMode = Enum.HighlightDepthMode.AlwaysOnTop, -- // AlwaysOnTop, Occluded
        FillColor = Color3.fromRGB(255, 255, 255),
        FillTransparency = 0.5,
        OutlineColor = Color3.fromRGB(1, 1, 1),
        OutlineTransparency = 0
    }
}

-- // Highlight

function HighlightSettingsUpdated(Player, PlayerData, Settings)
    if not PlayerData.Highlight then return end 
    for i, v in pairs(Settings.Highlight) do 
        PlayerData.Highlight[i] = v 
    end 
end 

function HighlightCharacterAdded(Player, Character, PlayerData, Settings)
    if not PlayerData.Highlight then
        PlayerData.Highlight = CreateInstance("Highlight", {Adornee = Character, Parent = HighlightParent, Enabled = false})
        HighlightSettingsUpdated(Player, PlayerData, Settings)
    else 
        PlayerData.Highlight.Enabled = Settings.HighlightEnabled
        PlayerData.Highlight.Adornee = Character 
    end 
end 

function HighlightCharactedRemoved(Player, PlayerData, Settings)
    if PlayerData.Highlight then 
        PlayerData.Highlight.Enabled = false 
    end 
end 

-- // PlayerFunctions (ESP, Highlight)

local PlayerFunctions = {
    CharacterAdded = {HighlightCharacterAdded},
    CharacterRemoved = {HighlightCharactedRemoved},
    UpdateSettings = {HighlightSettingsUpdated}
}

getgenv().Settings = {}
setmetatable(getgenv().Settings, {
    __index = function(t, i)
        return ESPSettings[i]
    end, 
    __newindex = function(t, i, v)
        ESPSettings[i] = v 
        for i, v in pairs(PlayerFunctions.UpdateSettings) do 
            for i1, v1 in pairs(PlayerData) do 
                if typeof(v1) == "table" then 
                    v(v1.Player, v1, ESPSettings)
                end 
            end 
        end 
    end 
})

-- // Player Handler

function PlayerData.CreatePlayer(Player)
    local Data = {
        Player = Player,
        Highlight = nil
    }
    
    local Character = Character or Player.Character
    if Character then 
        for i, v in pairs(PlayerFunctions.CharacterAdded) do 
            v(Player, Player.Character, Data, ESPSettings)
        end  
    end  

    Data.CharacterAdded = Player.CharacterAdded:Connect(function()
        for i, v in pairs(PlayerFunctions.CharacterAdded) do 
            v(Player, Player.Character, Data, ESPSettings)
        end
    end)

    Data.CharacterRemoved = Player.CharacterRemoving:Connect(function()
        for i, v in pairs(PlayerFunctions.CharacterRemoved) do 
            v(Player, Data, ESPSettings)
        end
    end)

    PlayerData[Player.Name] = Data
end 

function PlayerData.DeletePlayer(Player)
    Player = typeof(Player) == "string" and PlayerData[Player] or Player
    for i, v in pairs(Player) do 
        local Type = typeof(v)
        if Type == "Instance" then v:Destroy() elseif Type == "RBXScriptSignal" then v:Disconnect() end 
    end 
end 

for i, v in pairs(Players:GetPlayers()) do 
    if v ~= LocalPlayer then 
        PlayerData.CreatePlayer(v)
    end 
end 

Players.PlayerAdded:Connect(function(Player)
    if Player ~= LocalPlayer then 
        PlayerData.CreatePlayer(Player)
    end 
end)

